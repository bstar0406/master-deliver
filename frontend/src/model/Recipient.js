import { v4 as uuidv4 } from "uuid";

export default class Recipient {
  // This method returns a Recipient object generated by updating the address on the given recipient.
  static recipientWithUpdatedAddress = (oldRecipient, address) => {
    return {
      ...oldRecipient,
      address: address,
      status: "verified",
    };
  };

  // This method returns a new empty Recipient address, with a unique ID.
  static emptyRecipient = () => {
    return {
      id: uuidv4(),
      firstName: "",
      lastName: "",
      phone: "",
      email: "",
      address: "",
    };
  };

  // This method returns a recipient object based on a single row of data from a CSV file
  // Data in the array is assumed to be structured as:
  // firstName - lastName - phone - email - address
  static getRecipientFromCSVData = (data) => {
    return {
      id: uuidv4(),
      firstName: data[0],
      lastName: data[1],
      phone: data[2],
      email: data[3],
      address: data[4],
    };
  };

  // Helper method
  static cleanIfUndefined = (inputValue) => {
    if (inputValue === undefined) {
      return "";
    }
    return inputValue;
  };

  // This method returns an array of correctly formatted recipients.
  // It takes as input an array of recipients, and an array of verified addresses corresponding to these recipients.
  static getCleanedRecipientsFromVerifiedAddresses = (
    recipients,
    verifiedAddresses
  ) => {
    const cleanedRecipients = recipients;
    for (let i = 0; i < verifiedAddresses.length; i++) {
      const { verifiedAddress } = verifiedAddresses[i];
      let cleanedAddress = {
        fullStreet: Recipient.cleanIfUndefined(verifiedAddress.line1),
        city: Recipient.cleanIfUndefined(verifiedAddress.city),
        postalCode: Recipient.cleanIfUndefined(verifiedAddress.postalOrZip),
        state: Recipient.cleanIfUndefined(verifiedAddress.provinceOrState),
        country: Recipient.cleanIfUndefined(verifiedAddress.country),
        status: Recipient.cleanIfUndefined(verifiedAddress.status),
        errors: Recipient.cleanIfUndefined(verifiedAddress.errors),
      };
      cleanedAddress["fullAddress"] =
        cleanedAddress["fullStreet"] +
        ", " +
        cleanedAddress["city"] +
        " " +
        cleanedAddress["postalCode"] +
        cleanedAddress["state"] +
        ", " +
        cleanedAddress["country"];
      cleanedRecipients[i].address = cleanedAddress;
    }

    return cleanedRecipients;
  };
}
